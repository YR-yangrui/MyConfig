"‰∏ãÂàóÊèí‰ª∂ÈúÄË¶ÅÂú®IDEA‰∏≠‰∏ãËΩΩ
"ideaVim
"IdeaVim-EasyMotion
"IdeaVimExtension
"IdeaVimMultiCursor
"which-key
"Translation
"PrivateNotes
"TabMover
Plug 'nerdtree'
Plug 'easymotion/vim-easymotion'

":NERDTree
":NERDTreeFocus
":NERDTreeToggle
":NERDTreeClose
":NERDTreeFind
":NERDTreeRefreshRoot
"NERDTree options: https://github.com/JetBrains/ideavim/wiki/NERDTree-support
"o	Open files, directories and bookmarks	                    g:NERDTreeMapActivateNode
"go	Open selected file, but leave cursor in the NERDTree	    g:NERDTreeMapPreview
"t	Open selected node/bookmark in a new tab	                g:NERDTreeMapOpenInTab
"T	Same as 't' but keep the focus on the current tab	        g:NERDTreeMapOpenInTabSilent
"i	Open selected file in a split window	                    g:NERDTreeMapOpenSplit
"gi	Same as i, but leave the cursor on the NERDTree	            g:NERDTreeMapPreviewSplit
"s	Open selected file in a new vsplit	                        g:NERDTreeMapOpenVSplit
"gs	Same as s, but leave the cursor on the NERDTree	            g:NERDTreeMapPreviewVSplit
"O	Recursively open the selected directory	                    g:NERDTreeMapOpenRecursively
"x	Close the current nodes parent	                            g:NERDTreeMapCloseDir
"X	Recursively close all children of the current node	        g:NERDTreeMapCloseChildren
"P	Jump to the root node	                                    g:NERDTreeMapJumpRoot
"p	Jump to current nodes parent	                            g:NERDTreeMapJumpParent
"K	Jump up inside directories at the current tree depth	    g:NERDTreeMapJumpFirstChild
"J	Jump down inside directories at the current tree depth	    g:NERDTreeMapJumpLastChild
"<C-J>	Jump down to next sibling of the current directory	    g:NERDTreeMapJumpNextSibling
"<C-K>	Jump up to previous sibling of the current directory	g:NERDTreeMapJumpPrevSibling
"r	Recursively refresh the current directory	                g:NERDTreeMapRefresh
"R	Recursively refresh the current root	                    g:NERDTreeMapRefreshRoot
"m	Display the NERDTree menu	                                g:NERDTreeMapMenu
"q	Close the NERDTree window	                                g:NERDTreeMapQuit
"A	Zoom (maximize/minimize) the NERDTree window	            g:NERDTreeMapToggleZoom
"d	Delete file or directory	                                g:NERDTreeMapDelete
"n	Create File	                                                g:NERDTreeMapNewFile
"N	Create Directory	                                        g:NERDTreeMapNewDir

"============================== settings =======================================================
"set multicursor
set easymotion
set scrolloff=15
set incsearch
set ignorecase
set hlsearch
set number 
set keep-english-in-normal
set surround
set which-key
set notimeout
set ideajoin=true
set clipboard=unnamed
set clipboard+=ideaput

"============================== no leader keymap ===============================================
nmap <CR> o<Esc>
nmap <S-Enter> O<Esc>
nnoremap <C-j> :m +1<CR>
nnoremap <C-k> :m -2<CR>
inoremap <C-j> <Esc> :m +1<CR>gi
inoremap <C-k> <Esc> :m -2<CR>gi
xnoremap <C-j> :m '>+1<cr>gv=gv
xnoremap <C-k> :m '<-2<cr>gv=gv
nnoremap <C-f> :+10<CR>
nnoremap <C-b> :-10<CR>
imap <C-t> <Action>(Markdown.InsertEmptyTable)
nnoremap ga :<C-u>action GotoAction<CR>
nnoremap gb :<C-u>action JumpToLastChange<CR>
nnoremap gc :<C-u>action GotoClass<CR>
nnoremap gd :<C-u>action GotoDeclaration<CR>
nnoremap ge :<C-u>action GotoNextError<CR>
nnoremap gs :<C-u>action GotoSuperMethod<CR>
nnoremap gi :<C-u>action GotoImplementation<CR>
nnoremap gf :<C-u>action GotoFile<CR>
nnoremap gm :<C-u>action GotoSymbol<CR>
nnoremap gu :<C-u>action ShowUsages<CR>
nnoremap gt :<C-u>action GotoTest<CR>
nnoremap gp :<C-u>action FindInPath<CR>
nnoremap gr :<C-u>action RecentFiles<CR>
nnoremap gh :<C-u>action Back<CR>
nnoremap gl :<C-u>action Forward<CR>
"nnoremap gw :<C-u>action ShowErrorDescription<CR>
nnoremap gw :<C-u>action ShowHoverInfo<CR>


nmap <C-S> <action>(SaveAll)
imap <C-S> <Esc><action>(SaveAll)

nmap K <action>(QuickImplementations)
nmap L <action>(NextTab)
nmap <a-L> <action>(com.mnw.tabmover.actions.MoveTabDownAction)
nmap <a-J> <action>(com.mnw.tabmover.actions.MoveTabToNextWindow)
nmap <a-K> <action>(com.mnw.tabmover.actions.MoveTabToPreviousWindow)
nmap <a-L> <action>(com.mnw.tabmover.actions.MoveTabDownAction)
nmap <a-H> <action>(com.mnw.tabmover.actions.MoveTabUpAction)
nmap <a-s-H> <action>(com.mnw.tabmover.actions.MoveTabToFirstAction)
nmap <a-s-L> <action>(com.mnw.tabmover.actions.MoveTabToLastAction)
nmap <a-s-J> <action>(com.mnw.tabmover.actions.MoveTabToNewWindow)
nmap H <action>(PreviousTab)

nmap Q <action>(CloseEditor)

nmap ma <action>(ToggleBookmark)
nmap mu <action>(MethodUp)
nnoremap ms :<C-u>action EditorCodeBlockStart<CR>
nnoremap me :<C-u>action EditorCodeBlockEnd<CR>
nnoremap mx :<C-u>action MaximizeEditorInSplit<CR>
nnoremap mn :call JumpToFunction(v:true)<CR>
nnoremap mp :call JumpToFunction(v:false)<CR>

nmap <leader>h <action>(PrevSplitter)
nmap <leader>l <action>(NextSplitter)

nnoremap '' :<C-u>action Back<CR>
nnoremap 'w :call NextWord()<CR>
nnoremap 'b :call PrevWord()<CR>

function! JumpToFunction(isDown)
    if isDown
        execute '/^function'
    else
        execute '?^function'
    endif
    normal! n
    set nohlsearch
endfunction

function! NextWord()
    execute '/\u'
    set nohlsearch
endfunction

function! PrevWord()
    execute '?\u'
    set nohlsearch
endfunction
endfunction

imap jj <Esc>
imap jk <Esc>

"================================ leader keymap =================================================
let mapleader = ";"
nnoremap <leader>fs :<C-u>action FileStructurePopup<CR>
nmap <leader>o  <action>(GotoFile)

nmap <leader>bl <action>(GotoNextBookmark)
nmap <leader>bh <action>(GotoPreviousBookmark)
nmap <leader>bn <action>(GotoNextBookmarkInEditor)
nmap <leader>bp <action>(GotoPreviousBookmarkInEditor)
nmap <leader>bs <action>(ShowBookmarks)
nmap <leader>be <action>(EditBookmark)
nmap <leader>ca <action>(CloseAllEditors)
nmap <leader>cd :action CloseEditor<CR>
nmap <leader>cc <action>(CodeCompletion)
nmap <leader>co :action CloseAllEditorsButActive<CR>
nmap <leader>dp <Action>(ToggleLineBreakpoint)
nmap <leader>db <Action>(Debug)
vmap <leader>dd "+d
nmap <leader>e <action>(ActivateProjectToolWindow)
nmap <leader>ff <action>(GotoFile)
nmap <leader>fl <action>(SelectInProjectView)
nmap <leader>ft <action>(FindInPath)
nmap <leader>fc <action>(GotoAction)
nmap <leader>fm <action>(ReformatCode) \| <action>(OptimizeImports)
nmap <leader>gd <action>(Vcs.ShowTabbedFileHistory)
nmap <leader>gs <action>(VcsShowCurrentChangeMarker)
nmap <leader>gn <action>(VcsShowNextChangeMarker)
nmap <leader>gp <action>(VcsShowPrevChangeMarker)
nmap <leader>grh <action>(ChangesView.Revert)
nmap <leader>grl <action>(Vcs.RollbackChangedLines)
nmap <leader>gb <action>(Vcs.ShowHistoryForBlock)
vmap <leader>gb <action>(Vcs.ShowHistoryForBlock)
nmap <leader>gc <action>(Compare.SameVersion)
nmap <leader>i f(a
nmap <leader>j <c-w>j
nmap <leader>k <c-w>k
nmap <leader>me <action>(TextEditorWithPreview.Layout.EditorOnly)
nmap <leader>mp <action>(TextEditorWithPreview.Layout.PreviewOnly)
nmap <leader>mb <action>(TextEditorWithPreview.Layout.EditorAndPreview)
nmap <leader>nl :nohlsearch<CR>
nmap <leader>ner :NERDTree<CR>
" ÈúÄË¶ÅPrivateNotesÊèí‰ª∂
nmap <leader>na <action>(Private.Notes.add)
nmap <leader>nd <action>(Private.Notes.Del)
nmap <leader>ns <action>(Private.Notes.Detailed)
nmap <leader>nw <action>(Private.Notes.Wrap)
nmap <leader>no <action>(Private.Notes.Menu.OtherOperate)
nmap <leader>p "+p
nmap <leader>P "+P
vmap <leader>p "+p
vmap <leader>P "+P
nmap <leader>rc :action RunClass<CR>
nmap <leader>rr <action>(Rerun)
nmap <leader>rt <action>(RerunTests)
map <leader>rn <action>(RenameElement)
map <leader>ru <action>(Run)
nmap <leader>ro <action>(ReopenClosedTab)
nmap <leader>ss <action>(FileStructurePopup)
nmap <leader>sb <action>(ShowBookmarks)
nmap <leader>sp <action>(ParameterInfo)
nmap <leader>st <action>(Stop)
nmap <leader>tw <action>(Translation.EditorTranslateAction)
vmap <leader>tw <action>(Translation.EditorTranslateAction)
nmap <leader>tt <action>(Translation.TranslateTextComponentAction)
vmap <leader>tt <action>(Translation.TranslateTextComponentAction)
nmap <leader>to <action>(Translation.ShowTranslationDialogAction)
"nmap <leader>tq <action>(Translation.TranslateQuickDocAction)
"nmap <leader>td <action>(Translation.TranslateRenderedDocSelectionAction)
"nmap <leader>wml <action>(MoveTabRight)
"nmap <leader>wmd <action>(MoveTabDown)
"nmap <leader>wmo <action>(MoveEditorToOppositeTabGroup)
"nmap <leader>wmc <action>(SplitVertically)
"nmap <leader>wa <action>(UnsplitAll)
"nmap <leader>wc <c-w>c
"nmap <leader>wu <action>(Unsplit)
nmap <leader>ww <action>(HideAllWindows)
vmap <leader>y "+y
nmap <leader>y "+yy
nmap <leader>zo <action>(ExpandAllRegions)
nmap <leader>zc <action>(CollapseAllRegions)
nmap <space><space> <Esc>
nmap <leader><leader>w <action>(AceWordAction)
nmap <leader><leader>e <action>(AceWordEndAction)
nmap <leader><leader>b <action>(AceWordBackwardsAction)
nmap <leader><leader>j <action>(AceLineAction)
nmap <leader><leader>f <action>(AceAction)

"============================== which-key keymap ================================================
let g:WhichKeyDesc_LeaderKeymap= "<leader> üåüüåüüåüÁ¥´Ëâ≤‰∏∫‰∫åÁ∫ßÁõÆÂΩïüåüüåüüåü"

let g:WhichKeyDesc_bookmark = "ma ‰π¶Á≠æ"
let g:WhichKeyDesc_GotoAction = "ga Ë∑≥ËΩ¨Âà∞Êìç‰Ωú"
let g:WhichKeyDesc_JumpToLastChange = " gb Ë∑≥ËΩ¨Âà∞‰∏ä‰∏ÄÊ¨°‰øÆÊîπÁöÑÂú∞Êñπ"
let g:WhichKeyDesc_GotoClass = "gc Ë∑≥ËΩ¨Âà∞Á±ª "
let g:WhichKeyDesc_GotoNextError = "ge Ë∑≥ËΩ¨Âà∞‰∏ã‰∏Ä‰∏™ÈîôËØØ"
let g:WhichKeyDesc_GotoDeclaration = "gd Ë∑≥ËΩ¨Âà∞Â£∞Êòé"
let g:WhichKeyDesc_GotoSuperMethod = "gs Ë∑≥ËΩ¨Âà∞Áà∂Á±ªÊñπÊ≥ï"
let g:WhichKeyDesc_GotoImplementation = "gi Ë∑≥ËΩ¨Âà∞ÁªßÊâøÁ±ª"
let g:WhichKeyDesc_GotoFile = "gf Ë∑≥ËΩ¨Êñá‰ª∂"
let g:WhichKeyDesc_GotoSymbol = "gm Ë∑≥ËΩ¨Âà∞Ê†áÂøó"
let g:WhichKeyDesc_ShowUsages = "gu ÊòæÁ§∫Áî®Ê≥ï"
let g:WhichKeyDesc_ShowErrorDescription = "gw ÊòæÁ§∫ÊÇ¨ÊµÆÊó∂‰ø°ÊÅØ"
let g:WhichKeyDesc_GotoTest = "gt Ë∑≥ËΩ¨Âà∞ÊµãËØï‰ª£Á†Å"
let g:WhichKeyDesc_FindInPath = "gp Âú®Ë∑ØÂæÑ‰∏≠Êü•Êâæ"
let g:WhichKeyDesc_RecentFiles = "gr ÊúÄËøëÊâìÂºÄÁöÑÊñá‰ª∂"
let g:WhichKeyDesc_Back = "gh back"
let g:WhichKeyDesc_Forward = "gl front"

let g:WhichKeyDesc_MethodUp = "mu Âà∞‰∏ä‰∏Ä‰∏™ÊñπÊ≥ï"
let g:WhichKeyDesc_MoveToBlockStart = "ms ÁßªÂä®Âà∞‰ª£Á†ÅÂùóÂºÄÂßã"
let g:WhichKeyDesc_MoveToBlockEnd = "me ÁßªÂä®Âà∞‰ª£Á†ÅÂùóÁªìÊùü"


let g:WhichKeyDesc_bookmark_edit = "<leader>be ÁºñËæëÂΩìÂâç‰π¶Á≠æ"
let g:WhichKeyDesc_bookmark_prev = "<leader>bh Ââç‰∏Ä‰∏™‰π¶Á≠æ"
let g:WhichKeyDesc_bookmark_next = "<leader>bl ‰∏ã‰∏Ä‰∏™‰π¶Á≠æ"
let g:WhichKeyDesc_bookmark_nextInEditor = "<leader>bn ÂΩìÂâçÁ™óÂè£ÁöÑ‰∏ã‰∏Ä‰∏™‰π¶Á≠æ"
let g:WhichKeyDesc_bookmark_prevInEditor = "<leader>bp ÂΩìÂâçÁ™óÂè£ÁöÑÂâç‰∏Ä‰∏™‰π¶Á≠æ"
let g:WhichKeyDesc_bookmark_show = "<leader>bs ÊòæÁ§∫‰π¶Á≠æ"
let g:WhichKeyDesc_CodeAndClose = "<leader>c Code&ÂÖ≥Èó≠"
let g:WhichKeyDesc_CodeAndClose_CloseAllEditors = "<leader>ca ÂÖ≥Èó≠ÊâÄÊúâÊ†áÁ≠æÈ°µ"
let g:WhichKeyDesc_CodeAndClose_CloseEditor = "<leader>cd ÂÖ≥Èó≠ÂΩìÂâçÊ†áÁ≠æÈ°µ"
let g:WhichKeyDesc_CodeAndClose_CodeCompletion = "<leader>cc ‰ª£Á†ÅËá™Âä®Ë°•ÂÖ®"
let g:WhichKeyDesc_CodeAndClose_CloseAllEditorsButActive = "<leader>co ÂÖ≥Èó≠ÂÖ∂‰ªñÊ†áÁ≠æÈ°µ"

let g:WhichKeyDesc_DeBugOrDelete= "<leader>d Ë∞ÉËØï&Âà†Èô§"
let g:WhichKeyDesc_DebugOrDelete_BreakPoint = "<leader>dp ÊâìÊñ≠ÁÇπ/Ëß£Èô§Êñ≠ÁÇπ "
let g:WhichKeyDesc_DebugOrDelete_DeBug = "<leader>db Ë∞ÉËØï"
let g:WhichKeyDesc_DebugOrDelete_DeleteAndCopyToClipboard = "<leader>dd Âà†Èô§Âπ∂Â§çÂà∂Âà∞Ââ™ÂàáÊùø"

let g:WhichKeyDesc_ToggleExplorerOrExtract = "<leader>e ÊâìÂºÄÊñá‰ª∂ÂàóË°®"

let g:WhichKeyDesc_FindOrFormat = "<leader>f Êü•Êâæ&Ê†ºÂºèÂåñ"
let g:WhichKeyDesc_FindOrFormat_FindFile = "<leader>ff Êü•ÊâæÊñá‰ª∂"
let g:WhichKeyDesc_FindOrFormat_FindFileLocation = "<leader>fl ÂÆö‰ΩçÊñá‰ª∂‰ΩçÁΩÆ"
let g:WhichKeyDesc_FindOrFormat_FindText = "<leader>ft Êü•ÊâæÂ≠óÁ¨¶"
let g:WhichKeyDesc_FindOrFormat_Commands = "<leader>fc ÊâìÂºÄÊü•ÊâæËèúÂçï"
let g:WhichKeyDesc_FindOrFormat_Format = "<leader>fm Ê†ºÂºèÂåñ‰ª£Á†Å"

let g:WhichKeyDesc_GitOrGenerate = "<leader>g Git"
let g:WhichKeyDesc_Git_Rollback = "<leader>gr gitÂõûÊªö"
let g:WhichKeyDesc_Git_RollbackHunk = "<leader>grh gitÂõûÊªöÂùó"
let g:WhichKeyDesc_Git_RollbackLines = "<leader>grl gitÂõûÊªöË°å"
let g:WhichKeyDesc_Git_GitCompare = "<leader>gc git ÂØπÊØîÂΩìÂâçÊîπÂä®"
let g:WhichKeyDesc_Git_GitShowBlockHistory = "<leader>gb ÊòæÁ§∫ÈÄâÂå∫ÁâàÊú¨ÊéßÂà∂ÂéÜÂè≤"
let g:WhichKeyDesc_Git_GenerateSetter = "<leader>gs ÊòæÁ§∫ÂΩìÂâçË°åÁöÑ‰øÆÊîπ"
let g:WhichKeyDesc_Git_ShowTabbedFileHistory = "<leader>gd ÊòæÁ§∫Êñá‰ª∂ÁöÑÁâàÊú¨ÊéßÂà∂ÂéÜÂè≤"
let g:WhichKeyDesc_Git_GotoPrevChangeMarker = "<leader>gp ÂâçÂæÄ‰∏ä‰∏Ä‰∏™‰øÆÊîπÁöÑÂú∞Êñπ"
let g:WhichKeyDesc_Git_GotoNextChangeMarker = "<leader>gn ÂâçÂæÄ‰∏ã‰∏Ä‰∏™‰øÆÊîπÁöÑÂú∞Êñπ"

let g:WhichKeyDesc_Show_MoveToLeft = "<leader>h ÂêëÂ∑¶Ë∑≥ËΩ¨"

let g:WhichKeyDesc_InsertAfterBrackets = "<leader>i Ë∑≥ËΩ¨Âà∞ÈÄâ‰∏Ä‰∏™("

let g:WhichKeyDesc_Show_MoveToDown = "<leader>j Âêë‰∏ãË∑≥ËΩ¨"

let g:WhichKeyDesc_Show_MoveToUp = "<leader>k Âêë‰∏äË∑≥ËΩ¨"

let g:WhichKeyDesc_Show_MoveToRight = "<leader>l ÂêëÂè≥Ë∑≥ËΩ¨"

let g:WhichKeyDesc_Markdown = "<leader>m Markdown"
let g:WhichKeyDesc_Markdown_PreviewOnly = "<leader>mp ‰ªÖÈ¢ÑËßà"
let g:WhichKeyDesc_Markdown_EditorOnly = "<leader>me ‰ªÖÁºñËæëÂô®"
let g:WhichKeyDesc_Markdown_Both = "<leader>mb ÁºñËæëÂô®ÂíåÈ¢ÑËßà"

let g:WhichKeyDesc_NERDTreeOrNote = "<leader>n ÁõÆÂΩïÊ†ë&ÁßÅ‰∫∫Ê≥®Èáä"
let g:WhichKeyDesc_NERDTreeOrNote_Highlight = "<leader>nl ÂèñÊ∂àÊêúÁ¥¢È´ò‰∫Æ"
let g:WhichKeyDesc_NERDTreeOrNote_NoteDelete = "<leader>nd Âà†Èô§Ê≥®Èáä"
let g:WhichKeyDesc_NERDTreeOrNote_NoteAdd = "<leader>na Êñ∞Âª∫Ê≥®Èáä"
let g:WhichKeyDesc_NERDTreeOrNote_NoteShow = "<leader>ns Â±ïÁ§∫Ê≥®ÈáäÁªÜËäÇ"
let g:WhichKeyDesc_NERDTreeOrNote_NoteWrap = "<leader>nw Ê≥®ÈáäÊç¢Ë°å"
let g:WhichKeyDesc_NERDTreeOrNote_NoteMenuOperate = "<leader>no Ê≥®ÈáäÈù¢Êùø"

let g:WhichKeyDesc_OpenFile = "<leader>o ÊâìÂºÄÊñá‰ª∂"

let g:WhichKeyDesc_PasteClipboardDown = "<leader>p ‰ªéÂâ™ÂàáÊùøÁ≤òË¥¥Âà∞‰∏ãÈù¢Ë°å"
let g:WhichKeyDesc_PasteClipboardUp = "<leader>P ‰ªéÂâ™ÂàáÊùøÁ≤òË¥¥Âà∞‰∏äÈù¢Ë°å"
let g:WhichKeyDesc_PasteClipboardUp = "<leader>P ‰ªéÂâ™ÂàáÊùøÁ≤òË¥¥Âà∞‰∏äÈù¢Ë°å"

let g:WhichKeyDesc_RunOrRe = "<leader>r ËøêË°å&ÈáçÊñ∞"
let g:WhichKeyDesc_RunOrRe_RunClass = "<leader>rc ËøêË°åÂΩìÂâçÊñá‰ª∂"
let g:WhichKeyDesc_RunOrRe_ReRun = "<leader>rr ÈáçÊñ∞ËøêË°å"
let g:WhichKeyDesc_RunOrRe_ReRunTests = "<leader>rt ÈáçÊñ∞ËøêË°åTest"
let g:WhichKeyDesc_RunOrRe_Rename = "<leader>rn ÈáçÊûÑ"
let g:WhichKeyDesc_RunOrRe_Run = "<leader>ru ËøêË°å"

let g:WhichKeyDesc_Show = "<leader>s ÊòæÁ§∫&ÂÅúÊ≠¢"
let g:WhichKeyDesc_Show_FileStructure = "<leader>ss ÊòæÁ§∫Êñá‰ª∂ÁªìÊûÑ"
let g:WhichKeyDesc_Show_Bookmarks = "<leader>sb ÊòæÁ§∫‰π¶Á≠æÂ∑•ÂÖ∑Á™óÂè£"
let g:WhichKeyDesc_Show_ParameterInfo = "<leader>sp ÊòæÁ§∫ÊñπÊ≥ïÊàñÂáΩÊï∞ÁöÑÂèÇÊï∞‰ø°ÊÅØ"
let g:WhichKeyDesc_Show_Stop = "<leader>st ÂÅúÊ≠¢ËøêË°å"

let g:WhichKeyDesc_Translate = "<leader>t ÁøªËØë"
let g:WhichKeyDesc_Translate_word = "<leader>tw Áõ¥Êé•ÁøªËØë"
let g:WhichKeyDesc_Translate_window = "<leader>tt Á™óÂè£ÁøªËØë"
let g:WhichKeyDesc_Translate_showWindow = "<leader>to ÊâìÂºÄÁøªËØëÁ™óÂè£"

let g:WhichKeyDesc_Windows = "<leader>w Á™óÂè£"
let g:WhichKeyDesc_Windows_Move = "<leader>wm ÁßªÂä®Á™óÂè£"
let g:WhichKeyDesc_Windows_Move_MoveTabRight = "<leader>wml ÂêëÂè≥ÊãÜÂàÜÊ†áÁ≠æÈ°µ"
let g:WhichKeyDesc_Windows_Move_MoveTabDown = "<leader>wmd Âêë‰∏ãÊãÜÂàÜÊ†áÁ≠æÈ°µ"
let g:WhichKeyDesc_Windows_Move_MoveEditorToOppositeTabGroup = "<leader>wmo Âú®Âè¶‰∏ÄËæπÊâìÂºÄ"
let g:WhichKeyDesc_Windows_Move_SplitVertically = "<leader>wmc ÂêëÂè≥Â§çÂà∂Ê†áÁ≠æÈ°µ"

let g:WhichKeyDesc_Windows_UnsplitAll = "<leader>wa ÂèñÊ∂àÊâÄÊúâÂàÜÂâ≤Á™óÂè£"
let g:WhichKeyDesc_Windows_closeActiveWindow = "<leader>wc ÂÖ≥Èó≠ÂΩìÂâçÂàÜÂâ≤Á™óÂè£"
let g:WhichKeyDesc_Windows_Unsplit = "<leader>wu ÂèñÊ∂àÊãÜÂàÜÂΩìÂâçÂàÜÂâ≤Á™óÂè£"
let g:WhichKeyDesc_Windows_Hide_HideActiveWindow = "<leader>ww ÈöêËóè/ÊòæÁ§∫Ê¥ªÂä®Á™óÂè£"

let g:WhichKeyDesc_CopyClipboard = "<leader>y Â§çÂà∂Âà∞Ââ™ÂàáÊùø"
let g:WhichKeyDesc_CopyClipboard= "<leader>y Â§çÂà∂Âà∞Ââ™ÂàáÊùø"

let g:WhichKeyDesc_Zip = "<leader>z ÊäòÂè†"
let g:WhichKeyDesc_Zip_unZipAll = "<leader>zo Â±ïÂºÄÊâÄÊúâÊäòÂè†"
let g:WhichKeyDesc_Zip_ZipAll = "<leader>zc ÊäòÂè†ÊâÄÊúâ‰ª£Á†Å"

let g:WhichKeyDesc_easymotionkey = "<leader><leader> Âø´ÈÄüË∑≥ËΩ¨Êèí‰ª∂"
let g:WhichKeyDesc_easymotion = "s Âø´ÈÄüË∑≥ËΩ¨"
